package Func_LoginPage;
import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.Ecomm.base.BaseTest;
import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ScreenshotUtilities;
import com.aventstack.extentreports.Status;

public class LoginTestCases extends BaseTest {

    private WebDriverWait wait;
    private static final String EXCEL_PATH = System.getProperty("user.dir") + "/src/test/resources/Testdata/data.xlsx";
    private static final String SHEET_NAME = "Sheet1";
    private static final String LOGIN_URL = "https://www.automationexercise.com/login";

    // Page Elements
    private By emailTextBox = By.xpath("//input[@data-qa='login-email']");
    private By passwordTextBox = By.xpath("//input[@data-qa='login-password']");
    private By loginButton = By.xpath("//button[@data-qa='login-button']");
    private By signupButton = By.xpath("//button[@data-qa='signup-button']");
    private By loginErrorMessage = By.xpath("//p[contains(text(),'Your email or password is incorrect!')]");
    private By loggedInUser = By.xpath("//a[contains(text(),'Logged in as')]");
    private By homePageLogo = By.xpath("//img[@alt='Website for automation practice']");

    @BeforeMethod
    public void navigateToLoginPage() {
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        driver.get(LOGIN_URL);
        
        // Wait for page to load completely
        wait.until(ExpectedConditions.presenceOfElementLocated(emailTextBox));
        System.out.println("Navigated to login page: " + LOGIN_URL);
    }

    @DataProvider(name = "loginData")
    public Object[][] getLoginData() throws IOException {
        return ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
    }

    @Test(priority = 1, description = "To verify and validate the text box (Email) in signup/login page")
    public void TC_ECOM_Login_001() {
        test = extent.createTest("TC_ECOM_Login_001", "Verify Email text box functionality");
        test.log(Status.INFO, "Test started: Verifying email text box");

        try {
            WebElement emailField = wait.until(ExpectedConditions.elementToBeClickable(emailTextBox));
            
            // Clear any existing text and enter test data
            emailField.clear();
            emailField.sendKeys("Jaikrishnaa");
            
            String enteredText = emailField.getAttribute("value");
            Assert.assertEquals(enteredText, "Jaikrishnaa", "Email text box should accept input text");
            
            test.log(Status.PASS, "Email text box accepts input text successfully");
            System.out.println("TC_ECOM_Login_001: PASSED - Email text box functionality verified");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Email text box test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_001: FAILED - " + e.getMessage());
            Assert.fail("Email text box test failed: " + e.getMessage());
        }
    }

    @Test(priority = 2, description = "To verify and validate the text box (Password) in signup/login page")
    public void TC_ECOM_Login_002() {
        test = extent.createTest("TC_ECOM_Login_002", "Verify Password text box functionality");
        test.log(Status.INFO, "Test started: Verifying password text box");

        try {
            WebElement passwordField = wait.until(ExpectedConditions.elementToBeClickable(passwordTextBox));
            
            passwordField.clear();
            passwordField.sendKeys("Jaikrishnaa.git@gmail.com");
            
            String enteredText = passwordField.getAttribute("value");
            Assert.assertEquals(enteredText, "Jaikrishnaa.git@gmail.com", "Password text box should accept input text");
            
            test.log(Status.PASS, "Password text box accepts input text successfully");
            System.out.println("TC_ECOM_Login_002: PASSED - Password text box functionality verified");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Password text box test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_002: FAILED - " + e.getMessage());
            Assert.fail("Password text box test failed: " + e.getMessage());
        }
    }

    @Test(priority = 3, description = "To verify and validate the login button in signup/login page")
    public void TC_ECOM_Login_003() {
        test = extent.createTest("TC_ECOM_Login_003", "Verify Login button functionality");
        test.log(Status.INFO, "Test started: Verifying login button");

        try {
            WebElement loginBtn = wait.until(ExpectedConditions.elementToBeClickable(loginButton));
            Assert.assertTrue(loginBtn.isDisplayed(), "Login button should be displayed");
            Assert.assertTrue(loginBtn.isEnabled(), "Login button should be enabled");
            
            // Click the button to verify it's clickable
            loginBtn.click();
            
            test.log(Status.PASS, "Login button is clickable and functional");
            System.out.println("TC_ECOM_Login_003: PASSED - Login button functionality verified");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Login button test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_003: FAILED - " + e.getMessage());
            Assert.fail("Login button test failed: " + e.getMessage());
        }
    }

    @Test(priority = 4, description = "To verify login with valid email and valid password")
    public void TC_ECOM_Login_004() {
        test = extent.createTest("TC_ECOM_Login_004", "Verify login with valid credentials");
        test.log(Status.INFO, "Test started: Login with valid email and password");

        try {
            performLogin("Jaikrishnaa.git@gmail.com", "Team@A8");
            
            // Verify successful login
            WebElement loggedUser = wait.until(ExpectedConditions.presenceOfElementLocated(loggedInUser));
            Assert.assertTrue(loggedUser.isDisplayed(), "User should be logged in successfully");
            
            test.log(Status.PASS, "Login successful with valid credentials");
            System.out.println("TC_ECOM_Login_004: PASSED - Login successful with valid credentials");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Login with valid credentials failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_004: FAILED - " + e.getMessage());
            Assert.fail("Login with valid credentials failed: " + e.getMessage());
        }
    }

    @Test(priority = 5, description = "To verify login with valid password and no email")
    public void TC_ECOM_Login_005() {
        test = extent.createTest("TC_ECOM_Login_005", "Verify login with valid password and no email");
        test.log(Status.INFO, "Test started: Login with valid password and no email");

        try {
            performLogin("", "Team@A8");
            
            // Should show error or validation message
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with no email");
            System.out.println("TC_ECOM_Login_005: PASSED - Login correctly failed with no email");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_005: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 6, description = "To verify login with valid password and invalid email")
    public void TC_ECOM_Login_006() {
        test = extent.createTest("TC_ECOM_Login_006", "Verify login with valid password and invalid email");
        test.log(Status.INFO, "Test started: Login with valid password and invalid email");

        try {
            performLogin("Ja3-.git#gmail~com", "Team@A8");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with invalid email");
            System.out.println("TC_ECOM_Login_006: PASSED - Login correctly failed with invalid email");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_006: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 7, description = "To verify login with invalid password and valid email")
    public void TC_ECOM_Login_007() {
        test = extent.createTest("TC_ECOM_Login_007", "Verify login with invalid password and valid email");
        test.log(Status.INFO, "Test started: Login with invalid password and valid email");

        try {
            performLogin("Jaikrishnaa.git@gmail.com", "!@#~~_+dw");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with invalid password");
            System.out.println("TC_ECOM_Login_007: PASSED - Login correctly failed with invalid password");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_007: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 8, description = "To verify login with invalid password and no email")
    public void TC_ECOM_Login_008() {
        test = extent.createTest("TC_ECOM_Login_008", "Verify login with invalid password and no email");
        test.log(Status.INFO, "Test started: Login with invalid password and no email");

        try {
            performLogin("", "!@#~~_+dw");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with no email and invalid password");
            System.out.println("TC_ECOM_Login_008: PASSED - Login correctly failed with no email and invalid password");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_008: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 9, description = "To verify login with invalid password and invalid email")
    public void TC_ECOM_Login_009() {
        test = extent.createTest("TC_ECOM_Login_009", "Verify login with invalid password and invalid email");
        test.log(Status.INFO, "Test started: Login with invalid password and invalid email");

        try {
            performLogin("Ja3-.git#gmail~com", "!@#~~_+dw");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with invalid credentials");
            System.out.println("TC_ECOM_Login_009: PASSED - Login correctly failed with invalid credentials");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_009: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 10, description = "To verify login with no password and valid email")
    public void TC_ECOM_Login_010() {
        test = extent.createTest("TC_ECOM_Login_010", "Verify login with no password and valid email");
        test.log(Status.INFO, "Test started: Login with no password and valid email");

        try {
            performLogin("Jaikrishnaa.git@gmail.com", "");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with no password");
            System.out.println("TC_ECOM_Login_010: PASSED - Login correctly failed with no password");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_010: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 11, description = "To verify login with no password and no email")
    public void TC_ECOM_Login_011() {
        test = extent.createTest("TC_ECOM_Login_011", "Verify login with no password and no email");
        test.log(Status.INFO, "Test started: Login with no password and no email");

        try {
            performLogin("", "");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with empty credentials");
            System.out.println("TC_ECOM_Login_011: PASSED - Login correctly failed with empty credentials");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_011: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 12, description = "To verify login with no password and invalid email")
    public void TC_ECOM_Login_012() {
        test = extent.createTest("TC_ECOM_Login_012", "Verify login with no password and invalid email");
        test.log(Status.INFO, "Test started: Login with no password and invalid email");

        try {
            performLogin("Ja3-.git#gmail~com", "");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with no password and invalid email");
            System.out.println("TC_ECOM_Login_012: PASSED - Login correctly failed with no password and invalid email");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_012: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(priority = 13, description = "To verify login with non-registered email")
    public void TC_ECOM_Login_013() {
        test = extent.createTest("TC_ECOM_Login_013", "Verify login with non-registered email");
        test.log(Status.INFO, "Test started: Login with non-registered email");

        try {
            performLogin("Jaikrishnaa1218@gmail.com", "Team@A8");
            
            verifyLoginFailure();
            
            test.log(Status.PASS, "Login correctly failed with non-registered email");
            System.out.println("TC_ECOM_Login_013: PASSED - Login correctly failed with non-registered email");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            System.out.println("TC_ECOM_Login_013: FAILED - " + e.getMessage());
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    // Helper method to perform login
    private void performLogin(String email, String password) {
        try {
            WebElement emailField = wait.until(ExpectedConditions.elementToBeClickable(emailTextBox));
            WebElement passwordField = wait.until(ExpectedConditions.elementToBeClickable(passwordTextBox));
            WebElement loginBtn = wait.until(ExpectedConditions.elementToBeClickable(loginButton));

            emailField.clear();
            emailField.sendKeys(email);
            
            passwordField.clear();
            passwordField.sendKeys(password);
            
            loginBtn.click();
            
            // Wait a moment for the response
            Thread.sleep(2000);
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to perform login: " + e.getMessage());
        }
    }

    // Helper method to verify login failure
    private void verifyLoginFailure() {
        try {
            // Check if error message appears or still on login page
            boolean isErrorDisplayed = false;
            boolean isStillOnLoginPage = false;
            
            try {
                WebElement errorMsg = driver.findElement(loginErrorMessage);
                isErrorDisplayed = errorMsg.isDisplayed();
            } catch (Exception e) {
                // Error message might not appear for some validation cases
            }
            
            try {
                WebElement emailField = driver.findElement(emailTextBox);
                isStillOnLoginPage = emailField.isDisplayed();
            } catch (Exception e) {
                // If email field not found, might have navigated away
            }
            
            // Login should fail if error message is shown OR still on login page
            Assert.assertTrue(isErrorDisplayed || isStillOnLoginPage, 
                "Login should fail - either show error message or stay on login page");
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to verify login failure: " + e.getMessage());
        }
    }

    @AfterMethod
    public void handleTestResult(ITestResult result) {
        if (result.getStatus() == ITestResult.FAILURE) {
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, result.getMethod().getMethodName());
                test.addScreenCaptureFromPath(screenshotPath, "Test Failed Screenshot");
                test.log(Status.FAIL, "Test Failed: " + result.getThrowable().getMessage());
                System.out.println("Screenshot captured for failed test: " + result.getMethod().getMethodName());
            } catch (IOException e) {
                test.log(Status.FAIL, "Failed to capture screenshot: " + e.getMessage());
                System.out.println("Failed to capture screenshot: " + e.getMessage());
            }
        } else if (result.getStatus() == ITestResult.SUCCESS) {
            test.log(Status.PASS, "Test Passed Successfully");
        } else if (result.getStatus() == ITestResult.SKIP) {
            test.log(Status.SKIP, "Test Skipped: " + result.getThrowable().getMessage());
        }
    }
}