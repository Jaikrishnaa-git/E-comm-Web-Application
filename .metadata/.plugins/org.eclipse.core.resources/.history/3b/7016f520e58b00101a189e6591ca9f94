package UI_LoginPage;
import java.io.IOException;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.aventstack.extentreports.Status;
import com.Ecomm.base.BaseTest;
import com.Ecomm.pages.loginpage;
import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ScreenshotUtilities;

public class LoginTest extends BaseTest {
    
    private loginpage loginPage;
    
    @BeforeMethod
    public void setUpTest() {
        driver.get("https://rahulshettyacademy.com/loginpagePractise/");
        loginPage = new loginpage(driver);
    }
    
    @DataProvider(name = "loginTestData")
    public Object[][] getTestData() throws IOException {
        String excelPath = System.getProperty("user.dir") + "/data.xlsx";
        return ExcelUtilities.getdata(excelPath, "Sheet3");
    }
    
    @Test(dataProvider = "loginTestData", priority = 1)
    public void testValidEmailEntry(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("valid email entry")) {
            return;
        }
        
        test = extent.createTest("Valid Email Test - " + email);
        
        try {
            loginPage.enterEmail(email);
            String enteredEmail = loginPage.emailField.getAttribute("value");
            Assert.assertEquals(enteredEmail, email);
            test.log(Status.PASS, "Valid email entered successfully");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 2)
    public void testInvalidEmailEntry(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("invalid email entry")) {
            return;
        }
        
        test = extent.createTest("Invalid Email Test - " + email);
        
        try {
            loginPage.enterEmail(email);
            loginPage.clickLoginButton();
            Thread.sleep(2000);
            
            boolean isInvalid = !email.contains("@") || !email.contains(".");
            Assert.assertTrue(isInvalid, "Email should be invalid");
            test.log(Status.PASS, "Invalid email detected correctly");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 3)
    public void testValidPasswordEntry(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("valid password")) {
            return;
        }
        
        test = extent.createTest("Valid Password Test");
        
        try {
            loginPage.enterPassword(password);
            String enteredPassword = loginPage.getPasswordField().getAttribute("value");
            Assert.assertEquals(enteredPassword, password);
            test.log(Status.PASS, "Valid password entered successfully");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 4)
    public void testInvalidPasswordEntry(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("invalid password")) {
            return;
        }
        
        test = extent.createTest("Invalid Password Test");
        
        try {
            loginPage.enterEmail("test@example.com");
            loginPage.enterPassword(password);
            loginPage.clickLoginButton();
            Thread.sleep(2000);
            
            boolean isInvalid = password.length() < 3;
            Assert.assertTrue(isInvalid, "Password should be invalid");
            test.log(Status.PASS, "Invalid password detected correctly");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 5)
    public void testLoginButtonFunctionality(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("login button")) {
            return;
        }
        
        test = extent.createTest("Login Button Test - " + email);
        
        try {
            loginPage.enterEmail(email);
            loginPage.enterPassword(password);
            
            Assert.assertTrue(loginPage.loginButton.isEnabled());
            
            String currentUrl = driver.getCurrentUrl();
            loginPage.clickLoginButton();
            Thread.sleep(3000);
            String newUrl = driver.getCurrentUrl();
            
            if (expectedResult.toLowerCase().equals("success")) {
                Assert.assertNotEquals(currentUrl, newUrl);
                test.log(Status.PASS, "Login successful - URL changed");
            } else {
                test.log(Status.PASS, "Login failed as expected");
            }
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 6)
    public void testSignupEmailValidation(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("signup email")) {
            return;
        }
        
        test = extent.createTest("Signup Email Test - " + email);
        
        try {
            boolean isValidFormat = email.contains("@") && email.contains(".");
            
            if (expectedResult.toLowerCase().equals("valid")) {
                Assert.assertTrue(isValidFormat);
                test.log(Status.PASS, "Email format is valid");
            } else {
                Assert.assertFalse(isValidFormat);
                test.log(Status.PASS, "Email format is invalid as expected");
            }
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    @Test(dataProvider = "loginTestData", priority = 7)
    public void testSignupButtonFunctionality(String testCase, String email, String password, String expectedResult) {
        if (!testCase.toLowerCase().contains("signup button")) {
            return;
        }
        
        test = extent.createTest("Signup Button Test - " + email);
        
        try {
            boolean hasValidEmail = email.contains("@") && email.contains(".");
            boolean hasValidPassword = password.length() >= 3;
            
            if (hasValidEmail && hasValidPassword) {
                test.log(Status.PASS, "Signup data is valid");
            } else {
                test.log(Status.PASS, "Signup data is invalid as expected");
            }
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            captureScreenshotOnFailure();
            Assert.fail(e.getMessage());
        }
    }
    
    private void captureScreenshotOnFailure() {
        try {
            String screenshotPath = ScreenshotUtilities.capturescreen(driver, "Failed_Test");
            test.addScreenCaptureFromPath(screenshotPath);
        } catch (IOException e) {
            test.log(Status.WARNING, "Screenshot capture failed: " + e.getMessage());
        }
    }
}