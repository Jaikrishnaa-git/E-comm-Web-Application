package Func_LoginPage;
import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import com.Ecomm.base.BaseTest;
import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ExtentManager;
import com.Ecomm.utilities.ScreenshotUtilities;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
public class LoginTestCases extends BaseTest {
	
	private WebDriverWait wait;
	private static final String EXCEL_PATH = System.getProperty("user.dir") + "/src/test/resources/Testdata/data.xlsx";
	private static final String SHEET_NAME = "Sheet1";
	private static final String LOGIN_URL = "https://www.automationexercise.com/login";

	// Valid credentials
	private static final String VALID_EMAIL = "jaikrishnaa@gmail.com";
	private static final String VALID_PASSWORD = "Team@A8";

	// Static ExtentReports instance for the class
	private static ExtentReports extent;
	private ExtentTest test;

	// Page Elements
	private By emailTextBox = By.xpath("//input[@data-qa='login-email']");
	private By passwordTextBox = By.xpath("//input[@data-qa='login-password']");
	private By loginButton = By.xpath("//button[@data-qa='login-button']");
	private By signupButton = By.xpath("//button[@data-qa='signup-button']");
	private By loginErrorMessage = By.xpath("//p[contains(text(),'Your email or password is incorrect!')]");
	private By loggedInUser = By.xpath("//a[contains(text(),'Logged in as')]");
	private By homePageLogo = By.xpath("//img[@alt='Website for automation practice']");

	@BeforeClass
	public void setUpClass() {
		super.setUp(); // Call parent setup
		extent = ExtentManager.createInstance("LoginTestCases");
		System.out.println("LoginTestCases class setup completed");
	}

	@BeforeMethod
	public void navigateToLoginPage() {
		wait = new WebDriverWait(driver, Duration.ofSeconds(15));
		driver.get(LOGIN_URL);

		// Wait for page to load completely
		wait.until(ExpectedConditions.presenceOfElementLocated(emailTextBox));
		System.out.println("Navigated to login page: " + LOGIN_URL);
	}

	// DataProvider methods that handle Excel data with empty cells
	@DataProvider(name = "invalidEmailData")
	public Object[][] getInvalidEmailData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 5) {
				// Use row 6 (index 5) - "Ja3~git#gmail~com"
				String email = getCellValue(allData, 5, 0);
				if (email != null && !email.trim().isEmpty()) {
					return new Object[][]{{email}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data for invalid email: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{"invalid@test.com"}};
	}

	@DataProvider(name = "invalidPasswordData")
	public Object[][] getInvalidPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 6) {
				// Use row 7 (index 6) - "!@#~~_+dw"
				String password = getCellValue(allData, 6, 1);
				if (password != null && !password.trim().isEmpty()) {
					return new Object[][]{{password}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data for invalid password: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{"wrongpassword"}};
	}

	@DataProvider(name = "validLoginData")
	public Object[][] getValidLoginData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 3) {
				// Use row 4 (index 3) - "jaikrishnaa@gmail.com", "Team@A8"
				String email = getCellValue(allData, 3, 0);
				String password = getCellValue(allData, 3, 1);
				if (email != null && password != null && !email.trim().isEmpty() && !password.trim().isEmpty()) {
					return new Object[][]{{email, password}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data for validLogin: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{VALID_EMAIL, VALID_PASSWORD}};
	}

	@DataProvider(name = "emptyEmailValidPasswordData")
	public Object[][] getEmptyEmailValidPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 1) {
				// Use row 2 (index 1) - empty email, "Team@A8"
				String email = getCellValue(allData, 1, 0);
				String password = getCellValue(allData, 1, 1);
				if (password != null && !password.trim().isEmpty()) {
					return new Object[][]{{email != null ? email : "", password}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{"", VALID_PASSWORD}};
	}

	@DataProvider(name = "invalidEmailValidPasswordData")
	public Object[][] getInvalidEmailValidPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 12) {
				// Use row 13 (index 12) - "jaikrishnaa1218@gmail.com", "Team@A8"
				String email = getCellValue(allData, 12, 0);
				String password = getCellValue(allData, 12, 1);
				if (email != null && password != null && !email.trim().isEmpty() && !password.trim().isEmpty()) {
					return new Object[][]{{email, password}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{"invalid@email.com", VALID_PASSWORD}};
	}

	@DataProvider(name = "validEmailInvalidPasswordData")
	public Object[][] getValidEmailInvalidPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 6) {
				// Use row 7 (index 6) - "jaikrishnaa@gmail.com", "!@#~~_+dw"
				String email = getCellValue(allData, 6, 0);
				String password = getCellValue(allData, 6, 1);
				if (email != null && password != null && !email.trim().isEmpty() && !password.trim().isEmpty()) {
					return new Object[][]{{email, password}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{VALID_EMAIL, "wrongpass"}};
	}

	@DataProvider(name = "emptyEmailEmptyPasswordData")
	public Object[][] getEmptyEmailEmptyPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 7) {
				// Use row 8 (index 7) - empty email, empty password
				String email = getCellValue(allData, 7, 0);
				String password = getCellValue(allData, 7, 1);
				return new Object[][]{{email != null ? email : "", password != null ? password : ""}};
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{"", ""}};
	}

	@DataProvider(name = "validEmailEmptyPasswordData")
	public Object[][] getValidEmailEmptyPasswordData() {
		try {
			Object[][] allData = ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
			if (allData != null && allData.length > 9) {
				// Use row 10 (index 9) - "jaikrishnaa@gmail.com", empty password
				String email = getCellValue(allData, 9, 0);
				String password = getCellValue(allData, 9, 1);
				if (email != null && !email.trim().isEmpty()) {
					return new Object[][]{{email, password != null ? password : ""}};
				}
			}
		} catch (Exception e) {
			System.err.println("Error reading Excel data: " + e.getMessage());
		}
		// Always return fallback data to prevent skipping
		return new Object[][]{{VALID_EMAIL, ""}};
	}

	// Helper method to safely get cell value from Excel data
	private String getCellValue(Object[][] data, int row, int col) {
		try {
			if (data != null && data.length > row && data[row] != null && data[row].length > col) {
				Object value = data[row][col];
				return value != null ? value.toString().trim() : "";
			}
		} catch (Exception e) {
			System.err.println("Error getting cell value at row " + row + ", col " + col + ": " + e.getMessage());
		}
		return "";
	}

	@Test(priority = 1, dataProvider = "invalidEmailData", description = "To verify email text box with invalid email - Should FAIL")
	public void TC_ECOM_Login_001(String email) {
		test = extent.createTest("TC_ECOM_Login_001", "Verify Email text box with invalid email from Excel - Expected to FAIL");
		test.log(Status.INFO, "Test started: Verifying email text box with invalid email: " + email);

		try {
			WebElement emailField = wait.until(ExpectedConditions.elementToBeClickable(emailTextBox));

			// Clear any existing text and enter test data from Excel
			emailField.clear();
			emailField.sendKeys(email != null ? email : "");

			String enteredText = emailField.getAttribute("value");

			// Check if email is valid (should match our valid email exactly)
			boolean isValidEmail = VALID_EMAIL.equals(email);

			// Assert that email should be valid (this will fail for invalid emails)
			Assert.assertTrue(isValidEmail, "Email should be valid: " + email);

			test.log(Status.PASS, "Test passed - Valid email entered: " + email);
			System.out.println("TC_ECOM_Login_001: PASSED - Valid email: " + email);

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Invalid email detected: " + email + " - " + ae.getMessage());
			System.out.println("TC_ECOM_Login_001: FAILED - Invalid email: " + email);
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Email text box test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_001: FAILED - " + e.getMessage());
			Assert.fail("Email text box test failed: " + e.getMessage());
		}
	}

	@Test(priority = 2, dataProvider = "invalidPasswordData", description = "To verify password text box with invalid password - Should FAIL")
	public void TC_ECOM_Login_002(String password) {
		test = extent.createTest("TC_ECOM_Login_002", "Verify Password text box with invalid password from Excel - Expected to FAIL");
		test.log(Status.INFO, "Test started: Verifying password text box with invalid password: " + password);

		try {
			WebElement passwordField = wait.until(ExpectedConditions.elementToBeClickable(passwordTextBox));

			passwordField.clear();
			passwordField.sendKeys(password != null ? password : "");

			// Check if password is valid (should match our valid password exactly)
			boolean isValidPassword = VALID_PASSWORD.equals(password);

			// Assert that password should be valid (this will fail for invalid passwords)
			Assert.assertTrue(isValidPassword, "Password should be valid: " + password);

			test.log(Status.PASS, "Test passed - Valid password entered");
			System.out.println("TC_ECOM_Login_002: PASSED - Valid password entered");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Invalid password detected: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_002: FAILED - Invalid password");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Password text box test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_002: FAILED - " + e.getMessage());
			Assert.fail("Password text box test failed: " + e.getMessage());
		}
	}

	@Test(priority = 3, description = "To verify login button functionality - Should PASS")
	public void TC_ECOM_Login_003() {
		test = extent.createTest("TC_ECOM_Login_003", "Verify Login button functionality - Expected to PASS");
		test.log(Status.INFO, "Test started: Verifying login button");

		try {
			WebElement loginBtn = wait.until(ExpectedConditions.elementToBeClickable(loginButton));
			Assert.assertTrue(loginBtn.isDisplayed(), "Login button should be displayed");
			Assert.assertTrue(loginBtn.isEnabled(), "Login button should be enabled");

			// Verify button text
			String buttonText = loginBtn.getText();
			Assert.assertNotNull(buttonText, "Login button should have text");

			test.log(Status.PASS, "Login button is displayed, enabled and functional with text: " + buttonText);
			System.out.println("TC_ECOM_Login_003: PASSED - Login button functionality verified");

		} catch (Exception e) {
			test.log(Status.FAIL, "Login button test failed: " + e.getMessage());
			System.out.println("TC_ECOM_Login_003: FAILED - " + e.getMessage());
			Assert.fail("Login button test failed: " + e.getMessage());
		}
	}

	@Test(priority = 4, dataProvider = "validLoginData", description = "To verify login with valid credentials - Should PASS")
	public void TC_ECOM_Login_004(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_004", "Verify login with valid credentials from Excel - Expected to PASS");
		test.log(Status.INFO, "Test started: Login with valid credentials - Email: " + email);

		try {
			performLogin(email, password);

			// For valid credentials, login should succeed
			WebElement loggedUser = wait.until(ExpectedConditions.presenceOfElementLocated(loggedInUser));
			Assert.assertTrue(loggedUser.isDisplayed(), "User should be logged in with valid credentials");

			test.log(Status.PASS, "Login successful with valid credentials - User logged in as: " + loggedUser.getText());
			System.out.println("TC_ECOM_Login_004: PASSED - Login successful with valid credentials");

		} catch (Exception e) {
			test.log(Status.FAIL, "Login with valid credentials failed: " + e.getMessage());
			System.out.println("TC_ECOM_Login_004: FAILED - " + e.getMessage());
			Assert.fail("Login with valid credentials should succeed: " + e.getMessage());
		}
	}

	@Test(priority = 5, dataProvider = "emptyEmailValidPasswordData", description = "To verify login with empty email and valid password - Should FAIL")
	public void TC_ECOM_Login_005(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_005", "Verify login with empty email and valid password - Expected to FAIL");
		test.log(Status.INFO, "Test started: Login with empty email and valid password");

		try {
			performLogin(email, password);

			// Check if login succeeded (it shouldn't with empty email)
			boolean loginSucceeded = isLoginSuccessful();

			// Assert that login should succeed (this will fail for empty email)
			Assert.assertTrue(loginSucceeded, "Login should succeed with valid credentials");

			test.log(Status.PASS, "Test passed - Login succeeded");
			System.out.println("TC_ECOM_Login_005: PASSED - Login succeeded");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Login failed with empty email: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_005: FAILED - Login failed with empty email");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_005: FAILED - " + e.getMessage());
			Assert.fail("Test failed: " + e.getMessage());
		}
	}

	@Test(priority = 6, dataProvider = "invalidEmailValidPasswordData", description = "To verify login with invalid email and valid password - Should FAIL")
	public void TC_ECOM_Login_006(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_006", "Verify login with invalid email and valid password - Expected to FAIL");
		test.log(Status.INFO, "Test started: Login with invalid email: " + email);

		try {
			performLogin(email, password);

			// Check if login succeeded (it shouldn't with invalid email)
			boolean loginSucceeded = isLoginSuccessful();

			// Assert that login should succeed (this will fail for invalid email)
			Assert.assertTrue(loginSucceeded, "Login should succeed with valid credentials");

			test.log(Status.PASS, "Test passed - Login succeeded");
			System.out.println("TC_ECOM_Login_006: PASSED - Login succeeded");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Login failed with invalid email: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_006: FAILED - Login failed with invalid email");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_006: FAILED - " + e.getMessage());
			Assert.fail("Test failed: " + e.getMessage());
		}
	}

	@Test(priority = 7, dataProvider = "validEmailInvalidPasswordData", description = "To verify login with valid email and invalid password - Should FAIL")
	public void TC_ECOM_Login_007(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_007", "Verify login with valid email and invalid password - Expected to FAIL");
		test.log(Status.INFO, "Test started: Login with valid email and invalid password");

		try {
			performLogin(email, password);

			// Check if login succeeded (it shouldn't with invalid password)
			boolean loginSucceeded = isLoginSuccessful();

			// Assert that login should succeed (this will fail for invalid password)
			Assert.assertTrue(loginSucceeded, "Login should succeed with valid credentials");

			test.log(Status.PASS, "Test passed - Login succeeded");
			System.out.println("TC_ECOM_Login_007: PASSED - Login succeeded");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Login failed with invalid password: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_007: FAILED - Login failed with invalid password");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_007: FAILED - " + e.getMessage());
			Assert.fail("Test failed: " + e.getMessage());
		}
	}

	@Test(priority = 8, dataProvider = "emptyEmailEmptyPasswordData", description = "To verify login with empty credentials - Should FAIL")
	public void TC_ECOM_Login_008(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_008", "Verify login with empty credentials - Expected to FAIL");
		test.log(Status.INFO, "Test started: Login with empty credentials");

		try {
			performLogin(email, password);

			// Check if login succeeded (it shouldn't with empty credentials)
			boolean loginSucceeded = isLoginSuccessful();

			// Assert that login should succeed (this will fail for empty credentials)
			Assert.assertTrue(loginSucceeded, "Login should succeed with valid credentials");

			test.log(Status.PASS, "Test passed - Login succeeded");
			System.out.println("TC_ECOM_Login_008: PASSED - Login succeeded");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Login failed with empty credentials: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_008: FAILED - Login failed with empty credentials");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_008: FAILED - " + e.getMessage());
			Assert.fail("Test failed: " + e.getMessage());
		}
	}

	@Test(priority = 9, dataProvider = "validEmailEmptyPasswordData", description = "To verify login with valid email and empty password - Should FAIL")
	public void TC_ECOM_Login_009(String email, String password) {
		test = extent.createTest("TC_ECOM_Login_009", "Verify login with valid email and empty password - Expected to FAIL");
		test.log(Status.INFO, "Test started: Login with valid email and empty password");

		try {
			performLogin(email, password);

			// Check if login succeeded (it shouldn't with empty password)
			boolean loginSucceeded = isLoginSuccessful();

			// Assert that login should succeed (this will fail for empty password)
			Assert.assertTrue(loginSucceeded, "Login should succeed with valid credentials");

			test.log(Status.PASS, "Test passed - Login succeeded");
			System.out.println("TC_ECOM_Login_009: PASSED - Login succeeded");

		} catch (AssertionError ae) {
			test.log(Status.FAIL, "Test failed - Login failed with empty password: " + ae.getMessage());
			System.out.println("TC_ECOM_Login_009: FAILED - Login failed with empty password");
			throw ae; // Re-throw to fail the test
		} catch (Exception e) {
			test.log(Status.FAIL, "Test failed due to exception: " + e.getMessage());
			System.out.println("TC_ECOM_Login_009: FAILED - " + e.getMessage());
			Assert.fail("Test failed: " + e.getMessage());
		}
	}

	// Helper method to perform login
	private void performLogin(String email, String password) {
		try {
			WebElement emailField = wait.until(ExpectedConditions.elementToBeClickable(emailTextBox));
			WebElement passwordField = wait.until(ExpectedConditions.elementToBeClickable(passwordTextBox));
			WebElement loginBtn = wait.until(ExpectedConditions.elementToBeClickable(loginButton));

			// Clear and enter email (handle null/empty values)
			emailField.clear();
			if (email != null && !email.trim().isEmpty()) {
				emailField.sendKeys(email);
			}

			// Clear and enter password (handle null/empty values)
			passwordField.clear();
			if (password != null && !password.trim().isEmpty()) {
				passwordField.sendKeys(password);
			}

			// Click login button
			loginBtn.click();

			// Wait for response
			Thread.sleep(3000);

			System.out.println("Login attempted with Email: '" + email + "' and Password: '" + password + "'");

		} catch (Exception e) {
			throw new RuntimeException("Failed to perform login: " + e.getMessage());
		}
	}

	// Helper method to check if login was successful
	private boolean isLoginSuccessful() {
		try {
			// Check if user is logged in (login succeeded)
			WebElement loggedUser = driver.findElement(loggedInUser);
			boolean isLoggedIn = loggedUser.isDisplayed();
			System.out.println("Login successful: " + isLoggedIn);
			return isLoggedIn;
		} catch (Exception e) {
			// User not logged in
			System.out.println("Login failed - user not found or error occurred");
			return false;
		}
	}

	@AfterMethod
	public void handleTestResult(ITestResult result) {
		try {
			if (result.getStatus() == ITestResult.FAILURE) {
				// Capture screenshot only for failed tests
				String screenshotPath = ScreenshotUtilities.capturescreen(driver, result.getMethod().getMethodName());
				test.addScreenCaptureFromPath(screenshotPath, "Test Failed Screenshot");
				test.log(Status.FAIL, "Test Failed: " + result.getThrowable().getMessage());
				System.out.println("Screenshot captured for failed test: " + result.getMethod().getMethodName());

			} else if (result.getStatus() == ITestResult.SUCCESS) {
				test.log(Status.PASS, "Test Passed Successfully");
				System.out.println("Test passed: " + result.getMethod().getMethodName());

			} else if (result.getStatus() == ITestResult.SKIP) {
				test.log(Status.SKIP, "Test Skipped: " + result.getThrowable().getMessage());
				System.out.println("Test skipped: " + result.getMethod().getMethodName());
			}

			// Flush the test to ensure it's written to the report immediately
			if (extent != null) {
				extent.flush();
			}

		} catch (IOException e) {
			System.out.println("Failed to capture screenshot or handle test result: " + e.getMessage());
			test.log(Status.WARNING, "Failed to capture screenshot: " + e.getMessage());
		} catch (Exception e) {
			System.out.println("Unexpected error in handleTestResult: " + e.getMessage());
		}
	}

	@AfterClass
	public void tearDownClass() {
		try {
			if (extent != null) {
				ExtentManager.flushReports();
				System.out.println("Reports generated successfully in Reports folder");
			}
		} catch (Exception e) {
			System.out.println("Error generating reports: " + e.getMessage());
		} finally {
			super.tearDown(); // Call parent teardown
			System.out.println("LoginTestCases class teardown completed");
		}
	}
}                  