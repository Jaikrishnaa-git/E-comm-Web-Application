package Func_LoginPage;
import java.io.IOException;

import java.time.Duration;

import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ScreenshotUtilities;
import com.Ecomm.base.BaseTest;
import com.Ecomm.utilities.ExtentManager;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.*;

public class LoginTestCases extends BaseTest {

    private WebDriverWait wait;
    private static final String EXCEL_PATH = System.getProperty("user.dir") + "/src/test/resources/Testdata/data.xlsx";
    private static final String SHEET_NAME = "Sheet1";
    private static final String LOGIN_URL = "https://www.automationexercise.com/login";

    // Valid credentials
    private static final String VALID_EMAIL = "jaikrishnaa@gmail.com";
    private static final String VALID_PASSWORD = "Team@A8";

    // Extent Reports
    private static ExtentReports extent;
    private ExtentTest test;

    // Page Elements
    private By emailTextBox = By.xpath("//input[@data-qa='login-email']");
    private By passwordTextBox = By.xpath("//input[@data-qa='login-password']");
    private By loginButton = By.xpath("//button[@data-qa='login-button']");
    private By loggedInUser = By.xpath("//a[contains(text(),'Logged in as')]");

    @BeforeClass
    public void setUpClass() {
        super.setUp();
        extent = ExtentManager.createInstance("LoginTestCases");
    }

    @BeforeMethod
    public void navigateToLoginPage() {
        wait = new WebDriverWait(driver, java.time.Duration.ofSeconds(15));
        driver.get(LOGIN_URL);
        wait.until(ExpectedConditions.presenceOfElementLocated(emailTextBox));
    }

    @DataProvider(name = "loginData")
    public Object[][] loginData() throws Exception {
        return ExcelUtilities.getdata(EXCEL_PATH, SHEET_NAME);
    }

    // Perform login
    private void performLogin(String email, String password) {
        driver.findElement(emailTextBox).clear();
        driver.findElement(emailTextBox).sendKeys(email);

        driver.findElement(passwordTextBox).clear();
        driver.findElement(passwordTextBox).sendKeys(password);

        driver.findElement(loginButton).click();
    }

    private boolean isLoginSuccessful() {
        try {
            wait.until(ExpectedConditions.presenceOfElementLocated(loggedInUser));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // âœ… 7 Test Scenarios
    @Test(priority = 1, dataProvider = "loginData")
    public void TC_ValidLogin(String email, String password) {
        if (email.equals(VALID_EMAIL) && password.equals(VALID_PASSWORD)) {
            test = extent.createTest("TC_ValidLogin");
            performLogin(email, password);
            Assert.assertTrue(isLoginSuccessful(), "User should login successfully with valid credentials");
        }
    }

    @Test(priority = 2, dataProvider = "loginData")
    public void TC_EmptyEmail(String email, String password) {
        if (email.isEmpty() && !password.isEmpty()) {
            test = extent.createTest("TC_EmptyEmail");
            performLogin(email, password);
            Assert.assertTrue(isLoginSuccessful(), "Login should be allowed with empty email");
        }
    }

    @Test(priority = 3, dataProvider = "loginData")
    public void TC_EmptyPassword(String email, String password) {
        if (!email.isEmpty() && password.isEmpty()) {
            test = extent.createTest("TC_EmptyPassword");
            performLogin(email, password);
            Assert.assertTrue(isLoginSuccessful(), "Login should be allowed with empty password");
        }
    }

    @Test(priority = 4, dataProvider = "loginData")
    public void TC_EmptyBoth(String email, String password) {
        if (email.isEmpty() && password.isEmpty()) {
            test = extent.createTest("TC_EmptyBoth");
            performLogin(email, password);
            Assert.assertTrue(isLoginSuccessful(), "Login should be allowed with both fields empty");
        }
    }

    @Test(priority = 5, dataProvider = "loginData")
    public void TC_InvalidPassword(String email, String password) {
        if (email.equals(VALID_EMAIL) && !password.equals(VALID_PASSWORD)) {
            test = extent.createTest("TC_InvalidPassword");
            performLogin(email, password);
            Assert.assertFalse(isLoginSuccessful(), "Login should fail with invalid password");
        }
    }

    @Test(priority = 6, dataProvider = "loginData")
    public void TC_InvalidEmail(String email, String password) {
        if (!email.equals(VALID_EMAIL) && password.equals(VALID_PASSWORD)) {
            test = extent.createTest("TC_InvalidEmail");
            performLogin(email, password);
            Assert.assertFalse(isLoginSuccessful(), "Login should fail with invalid email");
        }
    }

    @Test(priority = 7, dataProvider = "loginData")
    public void TC_InvalidBoth(String email, String password) {
        if (!email.equals(VALID_EMAIL) && !password.equals(VALID_PASSWORD)) {
            test = extent.createTest("TC_InvalidBoth");
            performLogin(email, password);
            Assert.assertFalse(isLoginSuccessful(), "Login should fail with invalid email and password");
        }
    }

    @AfterMethod
    public void tearDown(org.testng.ITestResult result) throws Exception {
        if (result.getStatus() == ITestResult.FAILURE) {
            ScreenshotUtilities.capturescreen(driver, result.getName());
        }
        extent.flush();
    }
}                 