package Regression_Testing;

import org.testng.annotations.Test;
import org.testng.annotations.DataProvider;
import org.testng.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.io.IOException;

import com.Ecomm.base.BaseTest;
import com.Ecomm.pages.HomePage;


import com.Ecomm.pages.ProductsPage;
import com.Ecomm.pages.loginpage;
import com.Ecomm.pages.CartPage;
import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ScreenshotUtilities;
import com.aventstack.extentreports.Status;

public class Risk_Priority extends BaseTest {

    private HomePage homePage;
    private loginpage loginPage;
    private ProductsPage productPage;
    private CartPage cartPage;
    private WebDriverWait wait;

    @DataProvider(name = "testData")
    public Object[][] getData() throws IOException {
        String excelPath = System.getProperty("user.dir") + "/src/test/resources/Testdata/data.xlsx";
        return ExcelUtilities.getdata(excelPath, "Sheet2");
    }

    @Test(dataProvider = "testData", priority = 1)
    public void quantityCheckTest(String testCase, String product, String quantity, String price, 
                                 String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Quantity check")) {
            return; // Skip if not quantity check test case
        }
        
        test = extent.createTest("Quantity Check Test - " + product);
        
        try {
            test.log(Status.INFO, "Starting quantity check test for product: " + product);
            
            // Navigate to the application
            navigateToApplication();
            
            // Initialize page objects
            homePage = new HomePage(driver);
            productPage = new ProductsPage(driver);
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            
            // Search and select the product
            homePage.searchProduct(product);
            productPage.selectProduct(product);
            
            // Verify quantity field is present and functional
            WebElement quantityField = productPage.getQuantityField();
            Assert.assertTrue(quantityField.isDisplayed(), "Quantity field should be visible");
            
            // Clear and enter the quantity
            productPage.setQuantity(Integer.parseInt(quantity));
            
            // Verify the quantity is set correctly
            String actualQuantity = productPage.getQuantityValue();
            Assert.assertEquals(actualQuantity, quantity, "Quantity should match the entered value");
            
            test.log(Status.PASS, "Quantity check test passed for product: " + product);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Quantity check test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "QuantityCheck_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Quantity check test failed: " + e.getMessage());
        }
    }

    private void navigateToApplication() {
		// TODO Auto-generated method stub
		
	}

	@Test(dataProvider = "testData", priority = 2)
    public void cartValidationTest(String testCase, String product, String quantity, String price, 
                                  String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Cart validation")) {
            return;
        }
        
        test = extent.createTest("Cart Validation Test - " + product);
        
        try {
            test.log(Status.INFO, "Starting cart validation test for product: " + product);
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            productPage = new ProductsPage(driver);
            cartPage = new CartPage(driver);
            
            // Add product to cart
            homePage.searchProduct(product);
            productPage.selectProduct(product);
            productPage.setQuantity(Integer.parseInt(quantity));
            productPage.addToCart();
            
            // Navigate to cart
            homePage.goToCart();
            
            // Verify cart contains correct item, quantity, and price
            Assert.assertTrue(cartPage.isProductInCart(product), "Product should be in cart");
            Assert.assertEquals(cartPage.getProductQuantity(product), quantity, "Quantity should match");
            
            if (!price.equals("â€“") && !price.isEmpty()) {
                Assert.assertEquals(cartPage.getProductQuantity(product), price, "Price should match");
            }
            
            test.log(Status.PASS, "Cart validation test passed for product: " + product);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Cart validation test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "CartValidation_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Cart validation test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "testData", priority = 3)
    public void cartPersistenceTest(String testCase, String product, String quantity, String price, 
                                   String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Cart persistence")) {
            return;
        }
        
        test = extent.createTest("Cart Persistence Test - " + product);
        
        try {
            test.log(Status.INFO, "Starting cart persistence test for product: " + product);
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            productPage = new ProductsPage(driver);
            cartPage = new CartPage(driver);
            loginPage = new loginpage(driver);
            
            // Login first
            homePage.goToLogin();
            loginPage.login(email, password);
            
            // Add product to cart
            homePage.searchProduct(product);
            productPage.selectProduct(product);
            productPage.setQuantity(Integer.parseInt(quantity));
            productPage.addToCart();
            
            // Logout
            homePage.logout();
            
            // Login again
            homePage.goToLogin();
            loginPage.login(email, password);
            
            // Check if cart is persisted
            homePage.goToCart();
            Assert.assertTrue(cartPage.isProductInCart(product), "Product should persist in cart after logout/login");
            Assert.assertEquals(cartPage.getProductQuantity(product), quantity, "Quantity should persist");
            
            test.log(Status.PASS, "Cart persistence test passed for product: " + product);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Cart persistence test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "CartPersistence_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Cart persistence test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "testData", priority = 4)
    public void passwordMaskedTest(String testCase, String product, String quantity, String price, 
                                  String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Password masked")) {
            return;
        }
        
        test = extent.createTest("Password Masked Test");
        
        try {
            test.log(Status.INFO, "Starting password masked test");
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            loginPage = new loginpage(driver);
            
            // Navigate to login page
            homePage.goToLogin();
            
            // Enter password and verify it's masked
            loginPage.enterPassword(password);
            WebElement passwordField = loginPage.getPasswordField();
            
            String inputType = passwordField.getAttribute("type");
            Assert.assertEquals(inputType, "password", "Password field should be of type 'password'");
            
            test.log(Status.PASS, "Password masked test passed - password field is properly masked");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Password masked test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "PasswordMasked_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Password masked test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "testData", priority = 5)
    public void wrongLoginErrorTest(String testCase, String product, String quantity, String price, 
                                   String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Wrong login error")) {
            return;
        }
        
        test = extent.createTest("Wrong Login Error Test");
        
        try {
            test.log(Status.INFO, "Starting wrong login error test");
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            loginPage = new loginpage(driver);
            
            // Navigate to login page
            homePage.goToLogin();
            
            // Enter wrong credentials
            loginPage.login(email, password);
            
            // Verify error message is displayed
            Assert.assertTrue(loginPage.isErrorMessageDisplayed(), "Error message should be displayed for wrong credentials");
            
            String errorMessage = loginPage.getErrorMessage();
            Assert.assertFalse(errorMessage.isEmpty(), "Error message should not be empty");
            
            test.log(Status.PASS, "Wrong login error test passed - Error message displayed: " + errorMessage);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Wrong login error test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "WrongLoginError_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Wrong login error test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "testData", priority = 6)
    public void validLoginTest(String testCase, String product, String quantity, String price, 
                              String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Valid login")) {
            return;
        }
        
        test = extent.createTest("Valid Login Test");
        
        try {
            test.log(Status.INFO, "Starting valid login test");
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            loginPage = new loginpage(driver);
            
            // Navigate to login page
            homePage.goToLogin();
            
            // Enter valid credentials
            loginPage.login(email, password);
            
            // Verify successful login (check for logout button or user profile)
            Assert.assertTrue(homePage.isUserLoggedIn(), "User should be successfully logged in");
            
            test.log(Status.PASS, "Valid login test passed - User successfully logged in");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Valid login test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "ValidLogin_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Valid login test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "testData", priority = 7)
    public void brandNavigationTest(String testCase, String product, String quantity, String price, 
                                   String email, String password, String brand) {
        
        if (!testCase.equalsIgnoreCase("Brand navigation")) {
            return;
        }
        
        test = extent.createTest("Brand Navigation Test - " + brand);
        
        try {
            test.log(Status.INFO, "Starting brand navigation test for brand: " + brand);
            
            driver.get("https://your-ecommerce-url.com"); // Replace with actual URL
            
            homePage = new HomePage(driver);
            
            // Click on brand navigation
            homePage.clickBrandNavigation(brand);
            
            // Verify navigation to brand page
            Assert.assertTrue(homePage.isBrandPageDisplayed(brand), "Brand page should be displayed for: " + brand);
            
            // Verify URL contains brand name or brand products are displayed
            String currentUrl = driver.getCurrentUrl();
            Assert.assertTrue(currentUrl.toLowerCase().contains(brand.toLowerCase()) || 
                            homePage.areBrandProductsDisplayed(brand), 
                            "Should navigate to brand page or display brand products");
            
            test.log(Status.PASS, "Brand navigation test passed for brand: " + brand);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Brand navigation test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "BrandNavigation_Failed");
                test.addScreenCaptureFromPath(screenshotPath);
            } catch (IOException ioException) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ioException.getMessage());
            }
            Assert.fail("Brand navigation test failed: " + e.getMessage());
        }
    }
}