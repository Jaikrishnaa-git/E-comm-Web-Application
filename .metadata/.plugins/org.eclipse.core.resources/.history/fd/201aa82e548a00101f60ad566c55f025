package Func_LogoutPage;

import java.io.IOException;
import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.aventstack.extentreports.Status;
import com.Ecomm.base.BaseTest;
import com.Ecomm.utilities.ExcelUtilities;
import com.Ecomm.utilities.ScreenshotUtilities;

public class LogoutTestCase extends BaseTest {

    private WebDriverWait wait;
    
    // Test data file path
    private static final String TEST_DATA_PATH = "src/test/resources/Testdata/data.xlsx";
    private static final String SHEET_NAME = "Sheet2";
    
    // Locators
    private static final By LOGIN_SIGNUP_LINK = By.xpath("//a[contains(text(),'Signup / Login')]");
    private static final By LOGIN_EMAIL_INPUT = By.xpath("//input[@data-qa='login-email']");
    private static final By LOGIN_PASSWORD_INPUT = By.xpath("//input[@data-qa='login-password']");
    private static final By LOGIN_BUTTON = By.xpath("//button[@data-qa='login-button']");
    private static final By LOGOUT_BUTTON = By.xpath("//a[contains(text(),'Logout')]");
    private static final By DELETE_ACCOUNT_BUTTON = By.xpath("//a[contains(text(),'Delete Account')]");
    private static final By LOGGED_IN_USER = By.xpath("//a[contains(text(),'Logged in as')]");
    private static final By ACCOUNT_DELETED_MESSAGE = By.xpath("//h2[@data-qa='account-deleted']");

    @DataProvider(name = "loginTestData")
    public Object[][] getLoginTestData() throws IOException {
        return ExcelUtilities.getdata(TEST_DATA_PATH, SHEET_NAME);
    }

    private void performLogin(String email, String password) {
        try {
            wait = new WebDriverWait(driver, Duration.ofSeconds(15));
            
            // Navigate to the application
            driver.get("https://www.automationexercise.com/");
            
            // Click on Signup/Login link
            WebElement loginSignupLink = wait.until(ExpectedConditions.elementToBeClickable(LOGIN_SIGNUP_LINK));
            loginSignupLink.click();
            
            // Enter login credentials
            WebElement emailInput = wait.until(ExpectedConditions.visibilityOfElementLocated(LOGIN_EMAIL_INPUT));
            emailInput.clear();
            emailInput.sendKeys(email);
            
            WebElement passwordInput = driver.findElement(LOGIN_PASSWORD_INPUT);
            passwordInput.clear();
            passwordInput.sendKeys(password);
            
            // Click login button
            WebElement loginButton = driver.findElement(LOGIN_BUTTON);
            loginButton.click();
            
            // Wait for login to complete
            Thread.sleep(2000);
            
        } catch (Exception e) {
            System.out.println("Error during login: " + e.getMessage());
            throw new RuntimeException("Login failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "loginTestData", priority = 1)
    public void testLogoutButtonVisibility(String email, String password) {
        test = extent.createTest("Test Logout Button Visibility", 
            "Verify that logout button is visible after successful login");
        
        try {
            test.log(Status.INFO, "Starting test: Verify logout button visibility");
            test.log(Status.INFO, "Email: " + email);
            test.log(Status.INFO, "Opening URL: https://www.automationexercise.com/");
            
            // Perform login
            performLogin(email, password);
            test.log(Status.INFO, "Login performed successfully");
            
            // Verify logout button is visible
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement logoutButton = wait.until(ExpectedConditions.visibilityOfElementLocated(LOGOUT_BUTTON));
            
            Assert.assertTrue(logoutButton.isDisplayed(), "Logout button should be visible after login");
            test.log(Status.PASS, "Logout button is visible as expected");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "logoutButtonVisibility");
                test.addScreenCaptureFromPath(screenshotPath, "Logout Button Visibility Test Failed");
            } catch (IOException ex) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ex.getMessage());
            }
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "loginTestData", priority = 2)
    public void testDeleteAccountButtonVisibility(String email, String password) {
        test = extent.createTest("Test Delete Account Button Visibility", 
            "Verify that delete account button is visible after successful login");
        
        try {
            test.log(Status.INFO, "Starting test: Verify delete account button visibility");
            test.log(Status.INFO, "Email: " + email);
            test.log(Status.INFO, "Opening URL: https://www.automationexercise.com/");
            
            // Perform login
            performLogin(email, password);
            test.log(Status.INFO, "Login performed successfully");
            
            // Verify delete account button is visible
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement deleteAccountButton = wait.until(ExpectedConditions.visibilityOfElementLocated(DELETE_ACCOUNT_BUTTON));
            
            Assert.assertTrue(deleteAccountButton.isDisplayed(), "Delete Account button should be visible after login");
            test.log(Status.PASS, "Delete Account button is visible as expected");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "deleteAccountButtonVisibility");
                test.addScreenCaptureFromPath(screenshotPath, "Delete Account Button Visibility Test Failed");
            } catch (IOException ex) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ex.getMessage());
            }
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "loginTestData", priority = 3)
    public void testLoggedInUserVisibility(String email, String password) {
        test = extent.createTest("Test Logged In User Visibility", 
            "Verify that logged in user name is visible after successful login");
        
        try {
            test.log(Status.INFO, "Starting test: Verify logged in user name visibility");
            test.log(Status.INFO, "Email: " + email);
            test.log(Status.INFO, "Opening URL: https://www.automationexercise.com/");
            
            // Perform login
            performLogin(email, password);
            test.log(Status.INFO, "Login performed successfully");
            
            // Verify logged in user name is visible
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement loggedInUser = wait.until(ExpectedConditions.visibilityOfElementLocated(LOGGED_IN_USER));
            
            Assert.assertTrue(loggedInUser.isDisplayed(), "Logged in user name should be visible after login");
            
            // Get the username from the element
            String userText = loggedInUser.getText();
            test.log(Status.INFO, "Logged in user text: " + userText);
            
            test.log(Status.PASS, "Logged in user name is visible as expected: " + userText);
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "loggedInUserVisibility");
                test.addScreenCaptureFromPath(screenshotPath, "Logged In User Visibility Test Failed");
            } catch (IOException ex) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ex.getMessage());
            }
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "loginTestData", priority = 4)
    public void testLogoutButtonFunctionality(String email, String password) {
        test = extent.createTest("Test Logout Button Functionality", 
            "Verify that logout button works properly and redirects user to login page");
        
        try {
            test.log(Status.INFO, "Starting test: Verify logout button functionality");
            test.log(Status.INFO, "Email: " + email);
            test.log(Status.INFO, "Opening URL: https://www.automationexercise.com/");
            
            // Perform login
            performLogin(email, password);
            test.log(Status.INFO, "Login performed successfully");
            
            // Click logout button
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement logoutButton = wait.until(ExpectedConditions.elementToBeClickable(LOGOUT_BUTTON));
            logoutButton.click();
            test.log(Status.INFO, "Clicked on logout button");
            
            // Verify user is redirected to login page
            Thread.sleep(2000);
            wait.until(ExpectedConditions.visibilityOfElementLocated(LOGIN_SIGNUP_LINK));
            
            // Verify current URL
            String currentUrl = driver.getCurrentUrl();
            Assert.assertTrue(currentUrl.contains("automationexercise.com"), 
                "User should be redirected to home page after logout");
            
            // Verify login/signup link is visible (indicating user is logged out)
            WebElement loginSignupLink = driver.findElement(LOGIN_SIGNUP_LINK);
            Assert.assertTrue(loginSignupLink.isDisplayed(), "Login/Signup link should be visible after logout");
            
            test.log(Status.PASS, "Logout functionality working as expected");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "logoutButtonFunctionality");
                test.addScreenCaptureFromPath(screenshotPath, "Logout Button Functionality Test Failed");
            } catch (IOException ex) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ex.getMessage());
            }
            Assert.fail("Test failed: " + e.getMessage());
        }
    }

    @Test(dataProvider = "loginTestData", priority = 5)
    public void testDeleteAccountButtonFunctionality(String email, String password) {
        test = extent.createTest("Test Delete Account Button Functionality", 
            "Verify that delete account button works properly and deletes the user account");
        
        try {
            test.log(Status.INFO, "Starting test: Verify delete account button functionality");
            test.log(Status.INFO, "Email: " + email);
            test.log(Status.INFO, "Opening URL: https://www.automationexercise.com/");
            
            // Perform login
            performLogin(email, password);
            test.log(Status.INFO, "Login performed successfully");
            
            // Click delete account button
            wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement deleteAccountButton = wait.until(ExpectedConditions.elementToBeClickable(DELETE_ACCOUNT_BUTTON));
            deleteAccountButton.click();
            test.log(Status.INFO, "Clicked on delete account button");
            
            // Verify account deleted message or redirection
            Thread.sleep(3000);
            
            // Check if account deleted message appears or URL changes
            boolean isAccountDeleted = false;
            String currentUrl = driver.getCurrentUrl();
            
            try {
                WebElement accountDeletedMessage = wait.until(
                    ExpectedConditions.visibilityOfElementLocated(ACCOUNT_DELETED_MESSAGE));
                isAccountDeleted = accountDeletedMessage.isDisplayed();
                test.log(Status.INFO, "Account deleted message found");
            } catch (Exception ex) {
                // If message not found, check URL change
                isAccountDeleted = currentUrl.contains("delete") || currentUrl.contains("account_deleted");
                test.log(Status.INFO, "Checking URL for account deletion. Current URL: " + currentUrl);
            }
            
            Assert.assertTrue(isAccountDeleted, 
                "Account deletion should be successful - either message displayed or URL changed");
            
            test.log(Status.PASS, "Delete account functionality working as expected");
            
        } catch (Exception e) {
            test.log(Status.FAIL, "Test failed: " + e.getMessage());
            try {
                String screenshotPath = ScreenshotUtilities.capturescreen(driver, "deleteAccountButtonFunctionality");
                test.addScreenCaptureFromPath(screenshotPath, "Delete Account Button Functionality Test Failed");
            } catch (IOException ex) {
                test.log(Status.WARNING, "Failed to capture screenshot: " + ex.getMessage());
            }
            Assert.fail("Test failed: " + e.getMessage());
        }
    }
}
